.breadcrumbs
  %a{ :href => "/" }
    Documentation
  &nbsp;>&nbsp;
  %a{ :href => "/bdsm/" }
    BDSM
  &nbsp;>&nbsp;
  %a{ :href => "/bdsm/basics/" }
    Basics
  %hr

%h1 The Basics of BDSM

%p
  First, follow the
  %a{:href => "/bdsm/install/"}
    installation documentation
  to get BDSM running on your system. For most people, as long as you already have the short list of 
  %a{ :href => "/bdsm/prerequisites/" }
  prerequisites,
  this takes less than 90 seconds.
%p
  As stated on the
  %a{:href => "/"}
    main page
  BDSM is a system-wide scripting management framework. BDSM happens to be written primarily
  in bash -- but it supports all sorts of applications and tools, you can write extensions for it in pretty much any language you like. If zshell rocks your world, no problem: BDSM can get down and do the dirty deed daily with zshell, too, just as slick, baby.
%h2
  Extensions
%p
  BDSM is centered around the concept of extensions.
  Extensions are namespaced collections of scripts. 
  Which means no permanent scarring when you make them play together, no matter how rough you get - BDSM makes sure they'll always dance safely and obediently to your tune. 
%p
  You can
  %a{:href => "/extensions/"}
    read more about extensions
  in the documentation.

%h2
  Actions
%p
  Each extension includes a set of executable files in its bin/ directory.
  The executables power a given extension's individual repertoire of actions. 
  and some of them are very naughty indeed.
  And these actions are fully exposed, and await (panting) your every playful whim -- via the all-powerful, yet sparse, trim and starkly-uncomplicated bdsm command-line.
%p
  The general BDSM CLI for calling an extension action is,
%pre.code
  :preserve
    user$ bdsm [--trace] &lt;extension&gt; &lt;action&gt; [options]

%p
  The '--trace' option can be *very* helpful when
  %a{:href => "/development/extensions/"}
    developing an extension
  \.

%h2
  Modules
%p
  Firstly, you'll want to start out easy, by calling on the rich set of pre-written BDSM modules.
  They're an amazing toy-chest of deliciously wicked functionality that comes your way in easily-assimilated DSL form.
  You say it; they obey it.
%p
  Modules operate a lot like a programming language's standard libraries do: first, load the library; then
  go to town with its full functionality.
%p
  And when you have your system groveling obediently at your ankles, just begging to lick right between your toes in
  that oh-so-delicious favorite spot of yours, you may perhaps become completely satiated.
%p
  What's that? Too easy? You demand more; much, much more, from your abject slaves?
%p
  No problem! Writing your own exquisitely-crafted extension is far from being a huge test of your personal capacity
  for tolerating pain. (In fact, we bet you'll actually squeal with delight!)
%p
  And developing your own powerful system scripts isn't just electrifyingly fast with BDSM, it's more stimulating than plugging a 12-foot
  Van De Graaf generator directly into nickel-plated nipple clamps!
%p
  You can
  %a{:href => "/extensions/"}
    read more about extensions
  in the documentation.

%h2
  Language-Agnostic
%p
  THe "B" in BDSM means 'Bash...' - not, (sadly), because it's the quaint British synonym for fisticuffs
  that we all secretly wish it were... but simply because that is what it is written in primarily: the Bourne-Again Shell.
  Probably the world's most popular command-line interpreter 
  (sorry, no, Bill: DOS doesn't count. and don't talk to me about Cisco, darling - that nasty greasy stuff just goes sour and smelly
  in nothing flat. And it marks the carpet something awful.)
%p
  That being said, each and every extension action may be written in any
  language you wish. The key requirement for an extension action is simply that it is an executable
  file of a type that your operating system recognizes.
